hero:
  title: طريقة تسريع AMP للأداء
  subtitle: |
    تمثل التحسينات التالية - مجتمعةً - السبب الذي يجعل صفحات AMP سريعة لدرجة تجعل تحميلها يبدو وكأنه يتم في التو واللحظة:
    <p>إذا كنت ممن يفضلون الاستماع على القراءة، فإن الفيديو التالي من تقديم <span dir="ltr" class="nowrap">Malte Ubl</span>، رئيس فريق هندسة AMP، يمنحك نظرة عامة مماثلة للفقرات التالية.

points:
  pointlist:
    - title: السماح بالنصوص البرمجية غير المتزامنة فقط
      id: execute-js-asynchronously
      description: |
        تتميز جافا سكريبت بأنها ذات إمكانات فائقة،
        فهي قادرة على تعديل كل سمة من سمات الصفحة تقريبًا،
        لكنها كذلك قادرة على إعاقة إنشاء DOM وتأخير عرض الصفحة
        (انظر كذلك [إضافة التفاعل باستخدام JavaScript](https://developers.google.com/web/fundamentals/performance/critical-rendering-path/adding-interactivity-with-javascript)).
        لمنع جافا سكريبت من تأخير عرض الصفحة،
        تسمح AMP فقط بجافا سكريبت غير المتزامنة.
        <p>لا يمكن أن تتضمن صفحات AMP أي JavaScript مكتوبة بواسطة مؤلف.
        وبدلاً من استخدام جافا سكريبت،
        تتم معالجة ميزات الصفحة التفاعلية عبر عناصر AMP المخصصة.
        قد تتضمن عناصر AMP المخصصة جافا سكريبت ضمن الخيارات المتقدمة،
        لكنها تكون مصممة بحذر للتأكّد من عدم تسببها في تدهور الأداء.
        <p>وفي حين يتم السماح بـ JS من الجهات الخارجية في إطارات iframe،
        لكن لا يمكنها إعاقة العرض.
        على سبيل المثال، إذا كانت JS التابعة لجهات خارجية تستخدم
        [واجهة برمجة تطبيقات <span dir="ltr" class="nowrap">`document.write`</span> ذات التأثير السيء للغاية على الأداء](http://www.stevesouders.com/blog/2012/04/10/dont-docwrite-scripts/)،
        فهي لا تعيق عرض الصفحة الرئيسية.
    - title: تحديد حجم كل الموارد بشكل ثابت
      id: size-all-resources-statically
      description: |
        يجب أن تذكر الموارد الخارجية، مثل الصور، أو الإعلانات، أو إطارات iframe حجمها في HTML
        لكي تتمكن AMP من تحديد حجم كل عنصر وموضعه قبل تنزيل الموارد.
        تحمّل AMP تنسيق الصفحة بدون انتظار تنزيل أي موارد.
        <p>تفصل AMP تنسيق المستند عن تنسيق المورد.
        ليست هناك حاجة سوى لطلب HTTP واحد لتنسيق المستند كاملاً،
        ([+الخطوط](#font-triggering-must-be-efficient)).
        ونظرًا لأن AMP محسّنة لتجنب عمليات إعادة حساب النمط والتنسيقات كثيفة الاستهلاك في المتصفح،
        لن تكون هناك أي إعادة للتنسيق عند تحميل الموارد.
    - title: عدم السماح لآليات الإضافة بإعاقة العرض
      id: dont-block-rendering
      description: |
        لا تسمح AMP لآليات الإضافة بإعاقة عرض الصفحة.
        تدعم AMP الإضافات لأشياء، مثل
        [العروض المبسطة](/ar/docs/reference/components/amp-lightbox.html)،
        [وتضمينات instagram](/ar/docs/reference/components/amp-instagram.html)،
        و[التغريدات](/ar/docs/reference/components/amp-twitter.html)، وغير ذلك.
        وفي حين تستلزم هذه الأشياء طلبات HTTP إضافية،
        لا تعيق هذه الطلبات تنسيق الصفحة وعرضها.
        <p>يجب أن تخبر أي صفحة تستخدم نصًا برمجيًا مخصصًا نظامَ AMP
        أنها سوف ستتضمن في النهاية علامة مخصصة.
        على سبيل المثال، يخبر النص البرمجي [<span dir="ltr" class="nowrap">`amp-iframe`</span>](/ar/docs/reference/components/amp-iframe.html)
        النظام بأنه ستكون هناك علامة <span dir="ltr" class="nowrap">`amp-iframe`</span>.
        تنشئ AMP مربع iframe قبل أن تعرف حتى ما الذي سيتضمنه:
      example: /content/includes/amp-iframe.md
    - title: إبقاء كل جافا سكريبت التابعة لجهة خارجية بعيدًا عن المسار الحرج
      id: third-party-js-non-critical
      description: |
        تستحسن JS التابعة لجهات خارجية استخدام تحميل JS المتزامن.
        كذلك تستحسن استخدام <span dir="ltr" class="nowrap">`document.write`</span> مع النصوص البرمجية الأكثر تزامنًا.
        على سبيل المثال، إذا كانت لديك خمسة إعلانات، وكل منها ينفذ ثلاثة تحميلات متزامنة
        باستخدام اتصال ذي وقت استجابة يبلغ ثانية واحدة،
        يصبح لديك وقت تحميل يبلغ 15 ثانية لتحميل JS فقط.
        <p>تسمح صفحات AMP بجافا سكريبت من الجهات الخارجية، ولكن فقط في إطارات iframe في وضع الحماية.
        عبر حظرها في إطارات iframe، لا يمكنها إعاقة تنفيذ الصفحة الرئيسية.
        وحتى إذا قامت بتشغيل العديد من عمليات إعادة حساب النمط،
        فإن إطارات iframe بالغة الصغر تتضمن DOM صغيرة للغاية.
        <p>عمليات إعادة حساب النمط والتنسيقات نموذجية بالنسبة لحجم DOM،
        ولذلك تكون عمليات إعادة حساب إطار iframe سريعة للغاية مقارنةً
        بإعادة حساب الأنماط والتنسيق للصفحة.
    - title: يجب أن تكون كل CSS مضمّنة ومقيدة بالحجم المحدد
      id: css-must-be-inline
      description: |
        تعيق CSS كل عرض، فهي تعيق تحميل الصفحة، وتميل إلى أن تكون ذات حجم كبير.
        في صفحات <span dir="ltr" class="nowrap">AMP HTML</span>، غير مسموح سوى بالأنماط المضمّنة.
        يؤدي هذا إلى إزالة طلب واحد أو أكثر - غالبًا - من طلبات HTTP من مسار العرض الحرج
        مقارنةً بغالبية صفحات الويب.
        <p>وأيضًا، تتميز ورقة الأنماط المضمّنة بحد أقصى للحجم يبلغ 50 كيلوبايت.
        وبالرغم من أن هذا الحجم كبير بما يكفي للصفحات المعقّدة للغاية،
        لكن لا يزال يستلزم من مؤلف الصفحة تنفيذ ممارسة سلامة CSS جيدة.
    - title: يجب أن يكون تشغيل الخطوط فعالاً
      id: font-triggering-must-be-efficient
      description: |
        خطوط الويب كبيرة للغاية، لذلك يتميز
        [تحسين خطوط الويب](https://developers.google.com/web/fundamentals/performance/optimizing-content-efficiency/webfont-optimization)
        بأهمية بالغة للأداء.
        في صفحة نموذجية تتضمن بضعة نصوص برمجية متزامنة وبضعة أوراق أنماط خارجية،
        ينتظر المتصفح كثيرًا لبدء تنزيل هذه الخطوط هائلة الحجم إلى أن ينتهي من ذلك كله.
        <p>يعلن نظام AMP أن قيمة طلبات HTTP تساوي صفرًا إلى أن يبدأ تنزيل الخطوط.
        ولا يكون هذا ممكنًا إلا لأن كل JS في AMP يتميز بالسمة غير المتزامنة
        وغير مسموح إلا بورقات الأنماط المضمّنة؛
        فلا توجد طلبات HTTP تحول دون تنزيل المتصفح للخطوط.
    - title: تقليل عمليات حساب الأنماط لأدنى حد
      id: minimize-style-recalculations
      description: |
        كلما تقيس شيئًا ما، فإنه يشغّل عمليات حساب الأنماط كثيفة الاستهلاك
        لأن المتصفح يجب أن ينسّق الصفحة كاملةً.
        في صفحات AMP، تحدث كل عمليات قراءة DOM أولاً قبل حدوث كل عمليات الكتابة.
        يضمن هذا وجود حد أقصى يبلغ عملية إعادة حساب واحدة للأنماط لكل إطار.
        <p>تعرّف على المزيد بشأن تأثير عمليات إعادة حساب الأنماط والتنسيقات على
        [أداء العرض](https://developers.google.com/web/fundamentals/performance/rendering/).
    - title: الاقتصار على تشغيل العناصر المتحركة المسرّعة بواسطة وحدة معالجة رسومات
      id: only-run-gpu-accelerated-animations
      description: |
        الطريقة الوحيدة للحصول على تحسينات سريعة هي تشغيلها في وحدة معالجة رسومات.
        تكون وحدة معالجة الرسومات على معرفة بالطبقات، كما تعرف كيفية تنفيذ بعض الأشياء على هذه الطبقات،
        وهي قادرة على نقلها، ويمكنها جعلها تتلاشى تدريجيًا، لكن يتعذر عليها تعديل تنسيق الصفحة؛
        ولذلك ستقوم بتسليم هذه المهمة إلى المتصفح، وهذا أمر سيئ.
        <p>تضمن قواعد CSS المرتبطة بالعناصر المتحركة أن تتاح إمكانية تسريع العناصر المتحركة بواسطة وحدة معالجة رسومات.
        وتحديدًا، لا تسمح AMP سوى بالتحريك والنقل بناءً على التحويل ودرجة التعتيم
        وبذلك لا يكون تنسيق الصفحة مطلوبًا.
        تعرّف على المزيد بشأن
        [استخدام التحويل ودرجة التعتيم لتغييرات العناصر المتحركة](https://developers.google.com/web/fundamentals/performance/rendering/stick-to-compositor-only-properties-and-manage-layer-count).
    - title: وضع تحميل الموارد كأولوية
      id: prioritize-resource-loading
      description: |
        تتحكم AMP في كل تنزيلات الموارد: فهي تضع تحميل الموارد كأولوية،
        وبذلك لا يتم تحميل سوى الضروري فقط، وتجلب الموارد بطيئة التحميل مسبقًا.
        <p>عند تنزيل AMP للموارد، تضفي تحسينات على التنزيلات
        لكي يتم تنزيل الموارد الأكثر أهمية في الوقت الحالي أولاً.
        ولا يتم تنزيل الصور والإعلانات إلا إذا كان من المرجّح أن يراها المستخدم،
        أو في الجزء المرئي من الصفحة، أو إذا كان من المرجّح أن يقوم المستخدم بالتمرير إليها سريعًا.
        <p>كذلك تجلب AMP الموارد بطيئة التحميل مسبقًا.
        يتم تحميل الموارد متأخرًا بأكبر قدر ممكن، لكن يتم جلبها مسبقًا في أبكر وقت ممكن.
        بهذه الطريقة يتم تحميل العناصر سريعًا للغاية لكن وحدة المعالجة المركزية (CPU) لا يتم استخدامها إلا
        عندما تكون الموارد ظاهرة بالفعل للمستخدمين.
    - title: تحميل الصفحات على الفور
      id: load-pages-in-an-instant
      description: |
        يتم استخدام [واجهة برمجة التطبيقات (API) ما قبل الاتصال](http://www.w3.org/TR/resource-hints/#dfn-preconnect)
        بكثافة كبيرة لضمان أكبر سرعة ممكنة لطلبات HTTP عند تقديمها.
        في وجود ميزة كهذه،
        يمكن عرض أي صفحة قبل أن يصرح المستخدم بوضوح أنه يرغب في الانتقال إليها؛
        فالصفحة قد تكون متاحة بالفعل في وقت تحديد المستخدم لها واقعيًا،
        مما يؤدي إلى التحميل الفوري.
        <p>وبالرغم من أن العرض المسبق يمكن تطبيقه على كل محتوى الويب،
        لكنه قادر أيضًا على استنفاد مقدار كبير من معدل نقل البيانات ووحدة المعالجة المركزية (CPU). يتم تحسين AMP لتقليل كلٍّ من هذين العاملين. لا يقوم العرض المسبق إلا بتنزيل الموارد في الجزء المرئي من الصفحة
        ولا يعرض العرض المسبق الأشياء التي قد تستنزف وحدة المعالجة المركزية (CPU).
        <p>عند إخضاع مستندات AMP للعرض المسبق للحصول على التحميل الفوري،
        لا يتم فعليًا تنزيل سوى الموارد التي تكون في الجزء المرئي من الصفحة.
        عند خضوع مستندات AMP للعرض المسبق للحصول على التحميل الفوري،
        لا يتم تنزيل الموارد التي قد تستهلك الكثير من موارد وحدة المعالجة المركزية (CPU) (مثل إطارات iframe من جهة خارجية).
        <p>تعرّف على المزيد بشأن
        [أسباب عدم استفادة <span dir="ltr" class="nowrap">AMP HTML</span> استفادة كاملة من فاحص التحميل المسبق](https://medium.com/@cramforce/why-amp-html-does-not-take-full-advantage-of-the-preload-scanner-7e7f788aa94e).
    - title: ساعد في إضفاء سرعة أكبر على AMP
      id: help-make-amp-faster
      description: |
        تمثل AMP جهدًا مفتوح المصدر.
        نحتاج إلى مساعدتك في إضفاء المزيد من السرعة على AMP.
        تعرّف على [كيفية المساهمة](/ar/contribute/).
