name: 'Release: Static Production.'

on:
  workflow_dispatch:
  push:
    branches:
      - aws-dev

jobs:
  start-runner:
    timeout-minutes: 5
    name: Start self-hosted EC2 runner
    runs-on: ubuntu-latest
    permissions:
      actions: write        
      contents: read
      id-token: write
    steps:
      - name: Configure AWS credentials
        id: creds
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: "us-east-1"
          role-to-assume: "arn:aws:iam::369827282464:role/deployment-role"
          output-credentials: true                  
      - name: Start EC2 runner
        id: start-ec2-runner
        uses: NextChapterSoftware/ec2-action-builder@v1.5
        with:
          github_token: ${{ secrets.PAT }}
          aws_access_key_id: ${{ steps.creds.outputs.aws-access-key-id }}
          aws_secret_access_key: ${{ steps.creds.outputs.aws-secret-access-key }}
          aws_session_token: ${{ steps.creds.outputs.aws-session-token }}
          aws_iam_role_arn: "arn:aws:iam::369827282464:role/deployment-role"
          aws_region: "us-east-1"
          github_action_runner_version: v2.300.2 # Optional (default is latest release)
          ec2_instance_type: c5.4xlarge
          ec2_ami_id: ami-04d914df9d16d009c
          ec2_root_disk_size_gb: "100"                 # Optional - (defaults to AMI settings)
          ec2_root_disk_ebs_class: "gp2"               # Optional - Only used with custom volume root size (defaults to gp2)
          ec2_subnet_id: "subnet-e5717fd8"
          ec2_security_group_id: "sg-0c24020172d67c06a"
          ec2_instance_ttl: 40                          # Optional - (default is 60 minutes)
          ec2_spot_instance_strategy: BestEffort    # Other options are: None, BestEffort, MaxPerformance 
          ec2_instance_tags: >                          # Required for IAM role resource permission scoping
            [
              {"Key": "Owner", "Value": "deploybot"}
            ]

  build-and-deploy:
    needs: start-runner
    runs-on: ${{ github.run_id }}
    env:
      APP_ENV: production
    steps:
      - name: Cloning repository
        uses: actions/checkout@v4

      - name: Setting up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 16
          cache: npm

      - name: Installing Node.js packages
        run: npm ci

      - name: Queue check
        id: skip_check
        uses: fkirc/skip-duplicate-actions@master
        with:
          concurrent_skipping: 'outdated_runs'
          cancel_others: true
          skip_after_successful_duplicate: true
          paths_ignore: '["**/README.md", "**/docs/**"]'
          do_not_skip: '["workflow_dispatch", "schedule"]'

      - name: Running tests
        run: |
          npx gulp updateTestResources
          npx gulp lintNode
          npx gulp lintYaml
          npm run test:platform
#          npm run test:playground

      - name: Preparing build
        env:
          AMP_DOC_TOKEN: ${{ secrets.AMP_DOC_TOKEN }}
        run: |
          npx gulp buildPrepare

      - name: Setting up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'

      - name: Installing Grow
        run: |
          sudo apt-get install libyaml-dev
          pip install grow --upgrade-strategy eager

      - name: Building pages
        run: |
          for lang in en fr es hi pt_BR; do
            npx gulp buildPages --locales $lang
          done
#          for lang in de ar it id ja ko ru tr zh_CN pl vi; do
#            npx gulp buildPages --locales $lang
#          done

      - name: Finalizing build
        run: |
          npx gulp buildFinalize

      - name: Deploying
        env:
          NETLIFY_DEPLOY_TOKEN: ${{ secrets.NETLIFY_DEPLOY_TOKEN }}
        run: |
          npx gulp staticDeploy